// Generated by Dagger (https://dagger.dev).
package com.suleymancelik.github.core.viewmodel;

import com.suleymancelik.github.core.BaseViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ViewModelFactoryModule_ProvideMapFactory implements Factory<Map<Class<? extends BaseViewModel<?>>, AssistedViewModelFactory<?, ?>>> {
  private final ViewModelFactoryModule module;

  private final Provider<Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>>> viewModelFactoryMapProvider;

  public ViewModelFactoryModule_ProvideMapFactory(ViewModelFactoryModule module,
      Provider<Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>>> viewModelFactoryMapProvider) {
    this.module = module;
    this.viewModelFactoryMapProvider = viewModelFactoryMapProvider;
  }

  @Override
  public Map<Class<? extends BaseViewModel<?>>, AssistedViewModelFactory<?, ?>> get() {
    return provideMap(module, viewModelFactoryMapProvider.get());
  }

  public static ViewModelFactoryModule_ProvideMapFactory create(ViewModelFactoryModule module,
      Provider<Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>>> viewModelFactoryMapProvider) {
    return new ViewModelFactoryModule_ProvideMapFactory(module, viewModelFactoryMapProvider);
  }

  public static Map<Class<? extends BaseViewModel<?>>, AssistedViewModelFactory<?, ?>> provideMap(
      ViewModelFactoryModule instance,
      Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>> viewModelFactoryMap) {
    return Preconditions.checkNotNull(instance.provideMap(viewModelFactoryMap), "Cannot return null from a non-@Nullable @Provides method");
  }
}
