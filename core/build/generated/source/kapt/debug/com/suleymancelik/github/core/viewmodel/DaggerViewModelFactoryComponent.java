// Generated by Dagger (https://dagger.dev).
package com.suleymancelik.github.core.viewmodel;

import com.suleymancelik.github.core.BaseViewModel;
import dagger.internal.Preconditions;
import java.util.Map;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerViewModelFactoryComponent implements ViewModelFactoryComponent {
  private final Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>> viewModelInject;

  private final ViewModelFactoryModule viewModelFactoryModule;

  private DaggerViewModelFactoryComponent(ViewModelFactoryModule viewModelFactoryModuleParam,
      Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>> viewModelInjectParam) {
    this.viewModelInject = viewModelInjectParam;
    this.viewModelFactoryModule = viewModelFactoryModuleParam;
  }

  public static ViewModelFactoryComponent.Factory factory() {
    return new Factory();
  }

  @Override
  public Map<Class<? extends BaseViewModel<?>>, AssistedViewModelFactory<?, ?>> provideViewModelFactories(
      ) {
    return ViewModelFactoryModule_ProvideMapFactory.provideMap(viewModelFactoryModule, viewModelInject);}

  private static final class Factory implements ViewModelFactoryComponent.Factory {
    @Override
    public ViewModelFactoryComponent create(
        Map<Class<? extends BaseViewModel<?>>, ? extends AssistedViewModelFactory<?, ?>> viewModelInject) {
      Preconditions.checkNotNull(viewModelInject);
      return new DaggerViewModelFactoryComponent(new ViewModelFactoryModule(), viewModelInject);
    }
  }
}
